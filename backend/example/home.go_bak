//package models
package main

import (
	//"encoding/json"
	//"errors"
	"encoding/json"
	"fmt"
	orm "github.com/liyinda/ingress-admin/backend/api/database"
	"k8s.io/api/extensions/v1beta1"
	extensions "k8s.io/api/extensions/v1beta1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/intstr"
	"reflect"
	"time"
)

//如果读取不到etcd信息返回异常?
//func (domainnames *DomainName) DnsList() (domains []DomainName, err error) {
//
//	s := `[{"id": "650000199402171139","domainname": "www.baidu.com","status": "deleted","type": "name","rdata": "10.10.10.10","ttl": "4316"},{"id": "650000199402171131","domainname": "sdfsdf","status": "deleted","type": "name","rdata": "2017-03-11 05:35:45","ttl": "4317"}]`
//	//s, _ := orm.GetEtcdPrefix()
//
//	err = json.Unmarshal([]byte(s), &domains)
//	if err != nil {
//		return
//	}
//	return
//
//}

type Ingress struct {
	APIVersion string `json:"apiVersion"`
	Kind       string `json:"kind"`
	Metadata   struct {
		Annotations struct {
			KubernetesIoIngressClass string `json:"kubernetes.io/ingress.class"`
		} `json:"annotations"`
		CreationTimestamp time.Time `json:"creationTimestamp"`
		Generation        int       `json:"generation"`
		Name              string    `json:"name"`
		Namespace         string    `json:"namespace"`
		ResourceVersion   string    `json:"resourceVersion"`
		SelfLink          string    `json:"selfLink"`
		UID               string    `json:"uid"`
	} `json:"metadata"`
	Spec struct {
		Rules []struct {
			Host string `json:"host"`
			HTTP struct {
				Paths []struct {
					Backend struct {
						ServiceName string `json:"serviceName"`
						ServicePort int    `json:"servicePort"`
					} `json:"backend"`
				} `json:"paths"`
			} `json:"http"`
		} `json:"rules"`
	} `json:"spec"`
	Status struct {
		LoadBalancer struct {
		} `json:"loadBalancer"`
	} `json:"status"`
}

type IngressMeta struct {
	ingressName string
	nameSpace   string
	host        string
	serviceName string
	servicePort intstr.IntOrString
}

func (im *IngressMeta) ReturnIngress() *v1beta1.Ingress {
	ing := &extensions.Ingress{
		ObjectMeta: metav1.ObjectMeta{
			Name:              im.ingressName,
			Namespace:         im.nameSpace,
			CreationTimestamp: metav1.NewTime(time.Now()),
		},
		Spec: extensions.IngressSpec{
			Rules: []extensions.IngressRule{
				{
					Host: im.host,
					IngressRuleValue: extensions.IngressRuleValue{
						HTTP: &extensions.HTTPIngressRuleValue{
							Paths: []extensions.HTTPIngressPath{
								{
									Backend: extensions.IngressBackend{
										ServiceName: im.serviceName,
										ServicePort: im.servicePort,
									},
								},
							},
						},
					},
				},
			},
		},
	}
	return ing
}

func main() {
	//func (ingress *Ingress) GetList() v1beta1.Ingress {
	ingmeta := IngressMeta{
		ingressName: "test",
		nameSpace:   "tt",
	}
	list := orm.ListIngress
	fmt.Println("type:", reflect.TypeOf(list))
	fmt.Println(list)
	//return list
	value, err := json.Marshal(ingmeta)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println("json------")
	fmt.Println(string(value))
}
