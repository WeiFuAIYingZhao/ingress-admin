package models

//package main

import (
	"fmt"
	kubedata "github.com/liyinda/ingress-admin/backend/api/database"
	extensions "k8s.io/api/extensions/v1beta1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/intstr"
	"time"
	//"k8s.io/client-go/kubernetes"
	//"reflect"
)

//type IngressMeta struct {
//	IngressName string
//	NameSpace   string
//	Host        string
//	ServiceName string
//	ServicePort intstr.IntOrString
//	Path        string
//	Rps         string
//	Annotations map[string]string
//}

type IngressMeta struct {
	APIVersion string `json:"apiVersion"`
	Kind       string `json:"kind"`
	Metadata   struct {
		Annotations struct {
			KubernetesIoIngressClass string `json:"kubernetes.io/ingress.class"`
		} `json:"annotations"`
		CreationTimestamp time.Time `json:"creationTimestamp"`
		Generation        int       `json:"generation"`
		Name              string    `json:"name"`
		Namespace         string    `json:"namespace"`
		ResourceVersion   string    `json:"resourceVersion"`
		SelfLink          string    `json:"selfLink"`
		UID               string    `json:"uid"`
	} `json:"metadata"`
	Spec struct {
		Rules []struct {
			Host string `json:"host"`
			HTTP struct {
				Paths []struct {
					Backend struct {
						ServiceName string `json:"serviceName"`
						ServicePort int    `json:"servicePort"`
					} `json:"backend"`
				} `json:"paths"`
			} `json:"http"`
		} `json:"rules"`
	} `json:"spec"`
	Status struct {
		LoadBalancer struct {
		} `json:"loadBalancer"`
	} `json:"status"`
}

//在namespace中获取该命名空间中的ingress信息列表
func (ingmeta *IngressMeta) ListIngress(namespace string) (ingresses []IngressMeta, err error) {
	//func (ingmeta *IngressMeta) ListIngress(namespace string) (ingresses []string, err error) {
	//初始化clientset
	clientset, _ := kubedata.NewClientset()

	//列出namespace下的所有ingress
	ingressList, err := clientset.ExtensionsV1beta1().Ingresses(namespace).List(metav1.ListOptions{})
	if err != nil {
		panic(err.Error())
	}
	ingressCtrls := ingressList.Items

	if len(ingressCtrls) > 0 {
		for _, ingress := range ingressCtrls {

			//结构体赋值
			//	ingmeta.IngressName = ingress.Name
			//	ingmeta.NameSpace = namespace
			//	ingmeta.Host = ingress.Spec.Rules[0].Host
			//	ingmeta.ServiceName = ingress.Spec.Rules[0].IngressRuleValue.HTTP.Paths[0].Backend.ServiceName
			//	ingmeta.ServicePort = ingress.Spec.Rules[0].IngressRuleValue.HTTP.Paths[0].Backend.ServicePort
			//	ingmeta.Path = ingress.Spec.Rules[0].IngressRuleValue.HTTP.Paths[0].Path
			//	ingmeta.Rps = ingress.Annotations["nginx.ingress.kubernetes.io/limit-rps"]
			//	fmt.Println(*ingmeta)
			ingmeta.Metadata.Name = ingress.Name
			ingmeta.Metadata.Namespace = namespace
			ingmeta.Spec.Rules[0].Host = ingress.Spec.Rules[0].Host
			//ingmeta.Spec. = ingress.Spec.Rules[0].IngressRuleValue.HTTP.Paths[0].Backend.ServiceName
			//ingmeta.ServicePort = ingress.Spec.Rules[0].IngressRuleValue.HTTP.Paths[0].Backend.ServicePort
			//ingmeta.Path = ingress.Spec.Rules[0].IngressRuleValue.HTTP.Paths[0].Path
			//ingmeta.Rps = ingress.Annotations["nginx.ingress.kubernetes.io/limit-rps"]
			//结构体拼接
			ingresses = append(ingresses, *ingmeta)

		}
	} else {
		fmt.Println("no ingress found")
	}

	return
}

func (ingmeta *IngressMeta) ReturnIngress() *extensions.Ingress {
	ing := &extensions.Ingress{
		ObjectMeta: metav1.ObjectMeta{
			Name:              ingmeta.IngressName,
			Namespace:         ingmeta.NameSpace,
			CreationTimestamp: metav1.NewTime(time.Now()),
			Annotations:       ingmeta.Annotations,
		},
		Spec: extensions.IngressSpec{
			Rules: []extensions.IngressRule{
				{
					Host: ingmeta.Host,
					IngressRuleValue: extensions.IngressRuleValue{
						HTTP: &extensions.HTTPIngressRuleValue{
							Paths: []extensions.HTTPIngressPath{
								{
									Backend: extensions.IngressBackend{
										ServiceName: ingmeta.ServiceName,
										ServicePort: ingmeta.ServicePort,
									},
									Path: ingmeta.Path,
								},
							},
						},
					},
				},
			},
		},
	}
	return ing
}

//在namespace中创建该命名空间中的ingress
func (ingmeta *IngressMeta) CreateIngress(namespace string) bool {
	//初始化clientset
	clientset, _ := kubedata.NewClientset()

	//使用结构体,创建ingress
	ing := ingmeta.ReturnIngress()
	_, err := clientset.ExtensionsV1beta1().Ingresses(namespace).Create(ing)
	if err != nil {
		fmt.Println(err.Error())
		return false
	}

	return true
}

//func main() {
//    //func (ingress *Ingress) GetList() v1beta1.Ingress {
//    clientset, _ := kubeconfig.NewClientset()
//    list, _ := ListIngress(clientset, "kube-system")
//    fmt.Println("type:", reflect.TypeOf(list))
//    fmt.Println(list)
//    //return list
//}
