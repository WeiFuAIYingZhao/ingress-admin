//package models
package main

import (
	//"encoding/json"
	//"errors"
	"encoding/json"
	"fmt"
	kubeconfig "github.com/liyinda/ingress-admin/backend/api/database"
	"k8s.io/api/extensions/v1beta1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/intstr"
	"k8s.io/client-go/kubernetes"
	"reflect"
)

//如果读取不到etcd信息返回异常?
//func (domainnames *DomainName) DnsList() (domains []DomainName, err error) {
//
//	s := `[{"id": "650000199402171139","domainname": "www.baidu.com","status": "deleted","type": "name","rdata": "10.10.10.10","ttl": "4316"},{"id": "650000199402171131","domainname": "sdfsdf","status": "deleted","type": "name","rdata": "2017-03-11 05:35:45","ttl": "4317"}]`
//	//s, _ := orm.GetEtcdPrefix()
//
//	err = json.Unmarshal([]byte(s), &domains)
//	if err != nil {
//		return
//	}
//	return
//
//}

type IngressMeta struct {
	IngressName string
	NameSpace   string
	Host        string
	ServiceName string
	ServicePort intstr.IntOrString
}

type IngressJson struct {
	IngressMeta string
}

//在namespace中获取该命名空间中的ingress信息列表
//func (ingmeta *IngressMeta) ListIngress(clientset *kubernetes.Clientset, namespace string) v1beta1.Ingress {
func ListIngress(clientset *kubernetes.Clientset, namespace string) v1beta1.Ingress {
	//func (ingmeta *IngressMeta) ListIngress(clientset *kubernetes.Clientset, namespace string) v1beta1.Ingress {

	//列出namespace下的所有ingress
	ingressList, err := clientset.ExtensionsV1beta1().Ingresses(namespace).List(metav1.ListOptions{})
	if err != nil {
		panic(err.Error())
	}
	ingressCtrls := ingressList.Items

	var ingress v1beta1.Ingress

	if len(ingressCtrls) > 0 {
		for _, ingress := range ingressCtrls {
			//fmt.Printf("Rules %s exists in namespace %s\n", ingress.Spec.Rules[0].IngressRuleValue.HTTP.Paths[0].Backend.ServiceName, ingress.Namespace)
			ingmeta := new(IngressMeta)
			ingmeta.IngressName = ingress.Name
			ingmeta.NameSpace = namespace
			ingmeta.Host = ingress.Spec.Rules[0].Host
			ingmeta.ServiceName = ingress.Spec.Rules[0].IngressRuleValue.HTTP.Paths[0].Backend.ServiceName
			ingmeta.ServicePort = ingress.Spec.Rules[0].IngressRuleValue.HTTP.Paths[0].Backend.ServicePort
			//ing := u.ReturnIngress()
			//序列化json
			data, err := json.Marshal(ingmeta)
			if err != nil {
				fmt.Printf("json error %v\n", err)
			}
			fmt.Println(string(data))
		}
	} else {
		fmt.Println("no ingress found")
	}
	//return ingress, err
	return ingress
}

func main() {
	//func (ingress *Ingress) GetList() v1beta1.Ingress {
	clientset, _ := kubeconfig.NewClientset()
	list := ListIngress(clientset, "kube-system")
	fmt.Println("type:", reflect.TypeOf(list))
	//return list
}
