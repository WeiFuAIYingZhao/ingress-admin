//package main

package database

import (
	"flag"
	"fmt"
	"k8s.io/api/extensions/v1beta1"
	extensions "k8s.io/api/extensions/v1beta1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/intstr"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/tools/clientcmd"
	"path/filepath"
	"reflect"
	"time"
)

type IngressMeta struct {
	ingressName string
	nameSpace   string
	host        string
	serviceName string
	servicePort intstr.IntOrString
}

func (im *IngressMeta) ReturnIngress() *v1beta1.Ingress {
	ing := &extensions.Ingress{
		ObjectMeta: metav1.ObjectMeta{
			Name:              im.ingressName,
			Namespace:         im.nameSpace,
			CreationTimestamp: metav1.NewTime(time.Now()),
		},
		Spec: extensions.IngressSpec{
			Rules: []extensions.IngressRule{
				{
					Host: im.host,
					IngressRuleValue: extensions.IngressRuleValue{
						HTTP: &extensions.HTTPIngressRuleValue{
							Paths: []extensions.HTTPIngressPath{
								{
									Backend: extensions.IngressBackend{
										ServiceName: im.serviceName,
										ServicePort: im.servicePort,
									},
								},
							},
						},
					},
				},
			},
		},
	}
	return ing
}

//创建kubernetes中clientset连接
func NewClientset() (*kubernetes.Clientset, error) {
	// 配置 k8s 集群外 kubeconfig 配置文件
	var kubeconfig *string
	kubeconfig = flag.String("kubeconfig", filepath.Join("/home", ".kube", "config"), "absolute path to the kubeconfig file")
	flag.Parse()

	//在 kubeconfig 中使用当前上下文环境，config 获取支持 url 和 path 方式
	config, err := clientcmd.BuildConfigFromFlags("", *kubeconfig)
	if err != nil {
		panic(err.Error())
	}

	// 根据指定的 config 创建一个新的 clientset
	clientset, err := kubernetes.NewForConfig(config)
	fmt.Println("type:", reflect.TypeOf(clientset))
	if err != nil {
		panic(err.Error())
	}
	return clientset, err
}

//在namespace中获取该命名空间中的ingress信息列表
func ListIngress(clientset *kubernetes.Clientset, namespace string) v1beta1.Ingress {
	//func ListIngress(clientset *kubernetes.Clientset, namespace string) (v1beta1.Ingress, error) {
	//列出namespace下的所有ingress
	ingressList, err := clientset.ExtensionsV1beta1().Ingresses(namespace).List(metav1.ListOptions{})
	if err != nil {
		panic(err.Error())
	}
	ingressCtrls := ingressList.Items

	var ingress v1beta1.Ingress
	if len(ingressCtrls) > 0 {
		for _, ingress := range ingressCtrls {
			//fmt.Printf("Rules %s exists in namespace %s\n", ingress.Spec.Rules[0].IngressRuleValue.HTTP.Paths[0].Backend.ServiceName, ingress.Namespace)
			//判断ingress是否已经创建
			//ing := u.ReturnIngress()
			fmt.Println(ingress)
			fmt.Println("type:", reflect.TypeOf(ingress))
			u := new(IngressMeta)
			u.ingressName = ingress.Name
			u.host = ingress.Spec.Rules[0].Host
			u.serviceName = ingress.Spec.Rules[0].IngressRuleValue.HTTP.Paths[0].Backend.ServiceName
			u.servicePort = ingress.Spec.Rules[0].IngressRuleValue.HTTP.Paths[0].Backend.ServicePort
			ing := u.ReturnIngress()
			fmt.Println(ingress.Name)
			fmt.Println("type-ing:", reflect.TypeOf(ing))
		}
	} else {
		fmt.Println("no ingress found")
	}
	//return ingress, err
	return ingress
}

func init() {
	//func main() {
	clientset, _ := NewClientset()
	ListIngress(clientset, "kube-system")

}
